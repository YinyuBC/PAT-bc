#include <iostream>
#include <vector>
#include <queue>
using namespace std;

struct TreeNode {
	int val, height;
	TreeNode *left, *right;
	
	TreeNode(int v) : val(v), height(1), left(nullptr), right(nullptr) {}
};

int getheight(TreeNode* root) {
	if (nullptr == root) return 0;
	return root->height;
}

int getbf(TreeNode* root) {
	return getheight(root->left) - getheight(root->right);
}

void updateheight(TreeNode* root) {
	root->height = max(getheight(root->left), getheight(root->right)) + 1;
}

void R(TreeNode* & root) {
	TreeNode* tmp = root->left;
	root->left = tmp->right;
	tmp->right = root;
	updateheight(root);
	updateheight(tmp);
	root = tmp;	
}

void L(TreeNode* & root) {
	TreeNode* tmp = root->right;
	root->right= tmp->left;
	tmp->left = root;
	updateheight(root);
	updateheight(tmp);
	root = tmp;
} 

void insert(TreeNode* & root, int v) {
	if (nullptr == root) {
		root = new TreeNode(v);
		return;
	}
	if (v < root->val) {
		insert(root->left, v);
		updateheight(root);
		if (getbf(root) == 2) {
			if (getbf(root->left) == 1) {
				R(root);
			}
			else if (getbf(root->left) == -1) {
				L(root->left);
				R(root);
			}
		}
	}
	else {
		insert(root->right, v);
		updateheight(root);
		if (getbf(root) == -2) {
			if (getbf(root->right) == -1) {
				L(root);
			}
			else if (getbf(root->right) == 1) {
				R(root->right);
				L(root);
			}
		}
	}
}

TreeNode* create(int data[], int n) {
	TreeNode* root = nullptr;
	for (int i = 0; i < n; i++)
		insert(root, data[i]);
	return root;
}

bool beforehasNULL = false, isComplete = true;
vector<int>	levelOrder(TreeNode* root) {
	vector<int> res;
	queue<TreeNode*> q;
	if (root) q.push(root);
	while (!q.empty()) {
		TreeNode* cur = q.front(); q.pop();
		res.push_back(cur->val);
		if (cur->left) {
			if (beforehasNULL) isComplete = false;
			q.push(cur->left);
		} 
		else beforehasNULL = true;
		if (cur->right) {
			if (beforehasNULL) isComplete = false;
			q.push(cur->right);
		}
		else beforehasNULL = true;
	} 
	return res;
}

int main() {
	int n;
	cin >> n;
	int data[25];
	for (int i = 0; i < n; i++) {
		cin >> data[i];
	}
	TreeNode* root = create(data, n);
	vector<int> res = levelOrder(root);
	for (int i = 0; i < n; i++)
		printf("%d%s", res[i], i == n - 1 ? "\n" : " ");
	
	printf("%s\n", isComplete ? "YES" : "NO");
	return 0;
}
